
import openai
from llama_index import  download_loader
from urllib.parse import urlparse
from dotenv import load_dotenv
import os 

load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")
BeautifulSoupWebReader = download_loader("BeautifulSoupWebReader")
bsl_loader = BeautifulSoupWebReader()

def _chat_openai(prompt, system_text="",token_limit=2048):
    chat_query = [{"role":"system", "content": system_text}, {"role":"user", "content": prompt}]

    response = openai.ChatCompletion.create(
            messages=chat_query,    
            # model="gpt-4-0314",
            model = "gpt-3.5-turbo",
            temperature=0,
            max_tokens=token_limit,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            stop=' ;'
            )    
    output = response["choices"][0]["message"]["content"]
    return output

def _scrape_website(web_url:str):
    """
    Scrape the website for the company description

    Args:
        web_url (str): URL of the website

    Returns:
        str: Company description/summary
    """

    # BeautifulSoupWebReader = download_loader("BeautifulSoupWebReader")
    
    documents = bsl_loader.load_data(urls=[web_url])
    text_description = documents[0].text

    summarize_prompt = f'''
    Summarize the company details from the given website context. Tell us more about the company itself.
    Make a detailed summary.

    Website Context:
    {text_description[:3000]}
    '''
    system_text = "You are great at summarizing relevant information from website page data."
    chat_query = [{"role":"system", "content": system_text}, {"role":"user", "content": summarize_prompt}]
    
    web_summary = openai.ChatCompletion.create(
            messages=chat_query,    
            # model="gpt-4-0314",
            model = "gpt-3.5-turbo",
            temperature=0,
            max_tokens=1000,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            stop=' ;'
            )    
    web_summary = web_summary["choices"][0]["message"]["content"]
    web_summary = str(web_summary)

    return web_summary


def generate_roadmap(idea:str):
    """
    Generate a roadmap for the idea selected by the user

    Args:
        idea (str): Idea selected by the user

    Returns:
        roadmap(str) : Roadmap for the idea
    """
    prompt = '''
    
    '''
    system_prompt = ''

    roadmap = _chat_openai(prompt, system_prompt)
    return roadmap

def generate_ideas(company_link:str):
    """
    Generate ideas for the company based on the company description

    Args:
        company_link (str): URL of the company website
    Returns:
        list : List of ideas generated by the GPT-3 model
    """
    company_description = _scrape_website(company_link)

    prompt = '''
    Imagine you are a product manager, and developer who has 10+ years experience in different areas of machine learning and artificial intelligence.
    You understand how a company can benefit from the recent onset of generative ai, and you can help them with identifying the parts where they will actually derive benefit from the generative AI.
    Generate three ideas how the company might benefit from generative ai after understanding the company needs from the following company description. 
    Split the ideas by newline. 
    {company_description}
    Ideas:
    '''

    current_prompt = '''
    Given a summary of a business in any industry, provide exactly three numbered suggestions on how generative AI could be used to improve various aspects of its operations, tailored specifically for that business. 
    The AI improvement suggestions should be suitable for a professional audience, such as executives or those reporting to executives.
    Do not include an introduction or conclusion.
    Return information in JSON format
    Here is the provide summary of a specific business, which could be in any industry, for you to analyze and suggest AI improvements:
    {summary}
    '''
    system_prompt = 'You are a really helpful product manager that understand company needs, and specialize in generative AI, so you can act as a good guide.'
    ideas = _chat_openai(prompt, system_prompt, 4048 - (len(prompt) + len(system_prompt)))

    # ideas = ideas.split('\n')
    return ideas

